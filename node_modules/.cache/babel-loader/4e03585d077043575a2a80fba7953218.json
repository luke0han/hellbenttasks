{"ast":null,"code":"var _jsxFileName = \"/Users/lukeohanlon/Documents/myApps/hellbent/front/hellbent/src/components/EditTask.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Modal, Icon, TextArea } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditTask = props => {\n  _s();\n\n  //   const [id, setId] = useState('')\n  const [taskTitle, setTaskTitle] = useState('');\n  const [taskStartTime, setTaskStartTime] = useState('');\n  const [taskEndTime, setTaskEndTime] = useState('');\n  const [notes, setNotes] = useState('');\n  const [triggerValue, setTriggerValue] = useState('');\n  useEffect(id => {\n    setTriggerValue(props.selectedTask._id + 'trigger');\n    console.log('props.selectedTask.key' + props.selectedTask._id); //   console.log(triggerValue)\n    //     axios\n    //       .get('http://localhost:5000/task/' + id)\n    //       .then(response => {\n    //         {\n    //           setTitle(response.data.title)\n    //         }\n    //         {\n    //           setStartTime(response.data.startTime)\n    //         }\n    //         {\n    //           setEndTime(response.data.endTime)\n    //         }\n    //         {\n    //           setNotes(response.data.notes)\n    //         }\n    //       })\n    //       .catch(function (error) {\n    //         console.log(error)\n    //       })\n    //     setId(props.selectedTask._id)\n    //     console.log(`IMTHE ID: ${id}`)\n  }); //   const updateValue = (e) => {\n  //       const updatedTask = {\n  //         setTitle: title,\n  //         setStartTime: startTime,\n  //         setEndTime: endTime,\n  //         setNotes: notes\n  //       }\n  //   }\n\n  const updateTask = id => {\n    // const updatedTask = {\n    //     setTitle: title,\n    //     setStartTime: startTime,\n    //     setEndTime: endTime,\n    //     setNotes: notes\n    //   }\n    axios.post('http://localhost:5000/update/' + props.selectedTask._id).then(res => {\n      setTaskTitle(res.data.title);\n      setTaskStartTime(res.data);\n      setTaskEndTime(res.data);\n      setNotes(res.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    trigger: /*#__PURE__*/_jsxDEV(Button, {\n      className: \"ui small teal icon\" //   onClick={console.log(props.selectedTask._id + 'im the real id')}\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"pencil icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) // <CreateEditTasks />\n    ,\n    header: \"Edit/Delete Task\" //   content={props.selectedTask}\n    ,\n    actions: ['Snooze', {\n      key: 'done',\n      content: 'Done',\n      positive: true\n    }],\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      className: \"ui centered teal\",\n      children: \"Edit Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      image: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Description, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui raised segment\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"ui form\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"/\",\n                  className: \"ui teal left ribbon label\",\n                  children: \"Task\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"task-name\",\n                placeholder: \"\",\n                value: taskTitle,\n                onChange: e => setTaskTitle(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"/\",\n                  className: \"ui teal left ribbon label\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui three column stackable padded center aligned grid\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"seven wide column\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"time\",\n                    name: \"task-time\",\n                    placeholder: \"Task Time\",\n                    onChange: e => setTaskStartTime(e.target.value),\n                    value: taskStartTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"two wide column ui horizontal divider\",\n                  children: \"To\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"seven wide column\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"time\",\n                    name: \"task-time\",\n                    placeholder: \"Task Time\",\n                    onChange: e => setTaskEndTime(e.target.value),\n                    value: taskEndTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"field\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: \"/\",\n                    className: \"ui teal left ribbon label\",\n                    children: \"Notes\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"ui loading icon input\",\n                  children: /*#__PURE__*/_jsxDEV(TextArea, {\n                    placeholder: \"\",\n                    onChange: e => setNotes(e.target.value),\n                    value: notes\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"ui padded equal width grid\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui two column padded centered grid \",\n              children: /*#__PURE__*/_jsxDEV(Modal.Actions, {\n                children: [/*#__PURE__*/_jsxDEV(Button //   onClick={cancelTaskAdd}\n                , {\n                  className: \"center\",\n                  basic: true,\n                  color: \"teal\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"close\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 21\n                  }, this), \"Cancel\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => updateTask(props.selectedTask.key),\n                  color: \"teal\",\n                  className: \"four wide column\",\n                  children: [\"Save \", /*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"right chevron\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 26\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditTask, \"FWiWuePp1E67zdBXBJ9IYRDplEM=\");\n\n_c = EditTask;\n\nconst mapStateToProps = state => {\n  return {\n    selectedTask: state.selectedTask\n  };\n};\n\nexport default connect(mapStateToProps)(EditTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditTask\");","map":{"version":3,"sources":["/Users/lukeohanlon/Documents/myApps/hellbent/front/hellbent/src/components/EditTask.js"],"names":["useState","useEffect","connect","Button","Modal","Icon","TextArea","axios","EditTask","props","taskTitle","setTaskTitle","taskStartTime","setTaskStartTime","taskEndTime","setTaskEndTime","notes","setNotes","triggerValue","setTriggerValue","id","selectedTask","_id","console","log","updateTask","post","then","res","data","title","key","content","positive","e","target","value","mapStateToProps","state"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, Icon, TextArea } from 'semantic-ui-react'\nimport axios from 'axios'\n\nconst EditTask = props => {\n//   const [id, setId] = useState('')\n  const [taskTitle, setTaskTitle] = useState('')\n  const [taskStartTime, setTaskStartTime] = useState('')\n  const [taskEndTime, setTaskEndTime] = useState('')\n  const [notes, setNotes] = useState('')\n  const [triggerValue, setTriggerValue] = useState('')\n\n  useEffect((id) => {\n      setTriggerValue(props.selectedTask._id + 'trigger')\n\n      console.log('props.selectedTask.key' + props.selectedTask._id)\n    //   console.log(triggerValue)\n//     axios\n//       .get('http://localhost:5000/task/' + id)\n//       .then(response => {\n//         {\n//           setTitle(response.data.title)\n//         }\n//         {\n//           setStartTime(response.data.startTime)\n//         }\n//         {\n//           setEndTime(response.data.endTime)\n//         }\n//         {\n//           setNotes(response.data.notes)\n//         }\n//       })\n//       .catch(function (error) {\n//         console.log(error)\n//       })\n\n//     setId(props.selectedTask._id)\n//     console.log(`IMTHE ID: ${id}`)\n  })\n\n//   const updateValue = (e) => {\n//       const updatedTask = {\n//         setTitle: title,\n//         setStartTime: startTime,\n//         setEndTime: endTime,\n//         setNotes: notes\n//       }\n//   }\nconst updateTask = (id) => {\n    // const updatedTask = {\n    //     setTitle: title,\n    //     setStartTime: startTime,\n    //     setEndTime: endTime,\n    //     setNotes: notes\n    //   }\n      axios\n        .post('http://localhost:5000/update/' + props.selectedTask._id)\n        .then(res => {\n            setTaskTitle(res.data.title)\n            setTaskStartTime(res.data)\n            setTaskEndTime(res.data)\n            setNotes(res.data)\n        })\n\n}\n\n\n  return (\n    <Modal\n      trigger={\n        <Button\n          className=\"ui small teal icon\"\n        //   onClick={console.log(props.selectedTask._id + 'im the real id')}\n        >\n          <i className=\"pencil icon\" />\n        </Button>\n        // <CreateEditTasks />\n       \n      }\n      header=\"Edit/Delete Task\"\n      //   content={props.selectedTask}\n      actions={['Snooze', { key: 'done', content: 'Done', positive: true }]}\n    >\n      <Modal.Header className=\"ui centered teal\">Edit Task</Modal.Header>\n      <Modal.Content image>\n        <Modal.Description>\n          <div className=\"ui raised segment\">\n            <form className=\"ui form\">\n              <div className=\"field\">\n                <label>\n                  <a href=\"/\" className=\"ui teal left ribbon label\">\n                    Task\n                  </a>\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"task-name\"\n                  placeholder=\"\"\n                  value={taskTitle}\n                  onChange={e => setTaskTitle(e.target.value)}\n                  \n                />\n                {/* <TextArea>{props.selectedTask.title}</TextArea>  */}\n              </div>\n              <div className=\"field\">\n                <label>\n                  <a href=\"/\" className=\"ui teal left ribbon label\">\n                    Time\n                  </a>\n                </label>\n                <div className=\"ui three column stackable padded center aligned grid\">\n                  <div className=\"seven wide column\">\n                    <input\n                      type=\"time\"\n                      name=\"task-time\"\n                      placeholder=\"Task Time\"\n                      onChange={(e) => setTaskStartTime(e.target.value)}\n                      value={taskStartTime}\n                    />\n                  </div>\n                  <div className=\"two wide column ui horizontal divider\">\n                    To\n                  </div>\n                  <div className=\"seven wide column\">\n                    <input\n                      type=\"time\"\n                      name=\"task-time\"\n                      placeholder=\"Task Time\"\n                      onChange={e => setTaskEndTime(e.target.value)}\n                      value={taskEndTime}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <div className=\"field\">\n                  <label>\n                    <a href=\"/\" className=\"ui teal left ribbon label\">\n                      Notes\n                    </a>\n                  </label>\n                  <div className=\"ui loading icon input\">\n                    <TextArea\n                      placeholder=\"\"\n                      onChange={e => setNotes(e.target.value)}\n                      value={notes}\n                    ></TextArea>\n                  </div>\n                  <div className=\"ui padded equal width grid\"></div>\n                </div>\n              </div>\n              <div className=\"ui two column padded centered grid \">\n                <Modal.Actions>\n                  <Button\n                    //   onClick={cancelTaskAdd}\n                    className=\"center\"\n                    basic\n                    color=\"teal\"\n                  >\n                    <Icon name=\"close\" />\n                    Cancel\n                  </Button>\n                  <Button\n                      onClick={() => updateTask(props.selectedTask.key)}\n                    color=\"teal\"\n                    className=\"four wide column\"\n                  >\n                    Save <Icon name=\"right chevron\" />\n                  </Button>\n                </Modal.Actions>\n              </div>\n            </form>\n          </div>\n        </Modal.Description>\n      </Modal.Content>\n    </Modal>\n  )\n}\n\nconst mapStateToProps = state => {\n  return { selectedTask: state.selectedTask }\n}\n\nexport default connect(mapStateToProps)(EditTask)\n"]},"metadata":{},"sourceType":"module"}